services:
  
  # -------   AGENTS ---------------
  image-analyzer-agent:
    depends_on:
      - phoenix
    build:
      context: ./kit/containers/container_base_agent
      dockerfile: Dockerfile
      args:
        - GIT_TOKEN=${GIT_TOKEN}
    ports:
      - "8085:8080"
    volumes:
      - ./agents/image_analyzer:/app/code/agent
      #- ./kit/mapfre_agentkit:/app/code/mapfre_agentkit
    env_file:
      - ./.env
    environment:
      - CONFIG_PATH=/app/code/agent/agent_config.yaml
    labels:
      - "agent.owner=mak"
      - "agent.name=Image Analyzer"
      - "agent.card_url=http://image-analyzer-agent:8080"
      - "agent.discovery.enabled=true"
      - "agent.skill=image"
    command: >
      sh -c "pip install watchdog && \
             sleep 5 && \
             export PYTHONPATH=/app/code:/app/code/agent && \
             watchmedo auto-restart --directory=/app/code --patterns='*.py;*.yaml;*.yml' --recursive -- python /app/code/agent/__main__.py"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/.well-known/agent-card.json"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - my_network

  audio-analyzer-agent:
    depends_on:
      - phoenix
    build:
      context: ./kit/containers/container_base_agent
      dockerfile: Dockerfile
      args:
        - GIT_TOKEN=${GIT_TOKEN}
    ports:
      - "8086:8080"
    volumes:
      - ./agents/audio_analyzersource:/app/code/agent
      #- ./kit/mapfre_agentkit:/app/code/mapfre_agentkit
    env_file:
      - ./.env
    environment:
      - CONFIG_PATH=/app/code/agent/agent_config.yaml
    labels:
      - "agent.owner=mak"
      - "agent.name=Audio Analyzer"
      - "agent.card_url=http://audio-analyzer-agent:8080"
      - "agent.discovery.enabled=true"
      - "agent.skill=audio"
    command: >
      sh -c "pip install watchdog && \
             sleep 5 && \
             export PYTHONPATH=/app/code:/app/code/agent && \
             watchmedo auto-restart --directory=/app/code --patterns='*.py;*.yaml;*.yml' --recursive -- python /app/code/agent/__main__.py"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/.well-known/agent-card.json"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - my_network

#  summarizing-agent:
#    depends_on:
#      - phoenix
#    build:
#      context: ./kit/containers/container_base_agent
#      dockerfile: Dockerfile
#      args:
#        - GIT_TOKEN=${GIT_TOKEN}
#    ports:
#      - "8086:8080"
#    volumes:
#      - ./agents/summarizing-agent:/app/code/agent
#      - ./kit/mapfre_agentkit:/app/code/mapfre_agentkit
#    env_file:
#      - ./.env
#    environment:
#      - CONFIG_PATH=/app/code/agent/agent_config.yaml
    
#  command: >
#    sh -c "pip install watchdog && \
#           sleep 5 && \
#           export PYTHONPATH=/app/code:/app/code/agent && \
#           watchmedo auto-restart --directory=/app/code --patterns='*.py;*.yaml;*.yml' --recursive -- python /app/code/agent/__main__.py"
#  healthcheck:
#    test: ["CMD", "curl", "-f", "http://localhost:8080/.well-known/agent-card.json"]
#    interval: 10s
#    timeout: 5s
#    retries: 5
#    start_period: 30s
#  networks:
#    - my_network
# #github-agent:
#    depends_on:
#      - phoenix
#    build:
#      context: ./kit/containers/container_base_agent
#      dockerfile: Dockerfile
#      args:
#        - GIT_TOKEN=${GIT_TOKEN}
#    ports:
#      - "8087:8080"
#    volumes:
#      - ./agents/github-agent:/app/code/agent
#      - ./kit/mapfre_agentkit:/app/code/mapfre_agentkit
#    env_file:
#      - ./.env
#    environment:
#      - CONFIG_PATH=/app/code/agent/agent_config.yaml
    
#    command: >
#      sh -c "pip install watchdog && \
#             sleep 5 && \
#             export PYTHONPATH=/app/code:/app/code/agent && \
#             watchmedo auto-restart --directory=/app/code --patterns='*.py;*.yaml;*.yml' --recursive -- python /app/code/agent/__main__.py"
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080/.well-known/agent-card.json"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s
#    networks:
#      - my_network
#
#
# -------   AGENTS ---------------      

  api:
    depends_on:
      image-analyzer-agent:
        condition: service_healthy
    build:
      context: api
      dockerfile: Dockerfile
      args:
        - GIT_TOKEN=${GIT_TOKEN}
    ports:
      - "8081:8080"
    volumes:
      - ./api:/app/code/app
      - ./docker-compose.yml:/app/docker-compose.yml:ro
    env_file:
      - .env
    environment:
      - PHOENIX_HOST=phoenix
      - PHOENIX_PORT=6006
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    command: >
      sh -c "pip install watchdog && \
             sleep 5 && \
             export PYTHONPATH=/app/code:/app/code/app && \
             python /app/code/app/app.py"
    networks:
      - my_network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - my_network

#  portal:
#    depends_on:
#      agentkit-orchestrator-agent:
#        condition: service_healthy
#    build:
#      context: portal
#      dockerfile: Dockerfile
     
#    ports:
#      - "5173:5173"
#    volumes:
#      - ./portal:/app/code/app
#    env_file:
#      - .env
    
#    networks:
#      - my_network




  phoenix:
    image: arizephoenix/phoenix:latest
    ports:
      - "6006:6006"
    networks:
      - my_network

## ------ REDIS TO SESSION HANDLER-------------

#  redis:
#    image: redis:alpine
#    container_name: redis_session_store
#    restart: always
    
#    ports:
#      - "6379:6379"

#    command: redis-server --appendonly yes --requirepass ${REDIS_PASS}

#    volumes:
#      - redis_data:/data

#volumes:
#  redis_data:
#    driver: local
## -----------------END REDIS ------------------


#  github-mcp-server:
#    image: ghcr.io/github/github-mcp-server
#    container_name: github-mcp-server
#    env_file:
#      - .env
#    ports:
#      - "8090:8090"
#    environment:
#      GITHUB_PERSONAL_ACCESS_TOKEN: ${GITHUB_MANU}
#    stdin_open: true 
#    tty: true
#    restart: unless-stopped
#    networks:
#      - my_network
    

  ## Build from here https://github.com/a2aproject/a2a-inspector.git
#  a2ainspector:
#    image: a2a-inspector
#    ports:
#      - "6007:8080"
#    networks:
#      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  minio-data:
    driver: local